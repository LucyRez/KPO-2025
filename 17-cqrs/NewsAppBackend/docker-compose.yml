x-postgres-common:
  &postgres-common
  image: postgres:15
  restart: always
  healthcheck:
    test: 'pg_isready -U postgres --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
    news-app-backend:
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - "8080:8080"
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - CONNECTIONSTRINGS__READWRITE=Host=postgres-master;Database=NewsAppBackend;Username=postgres;Password=postgres
            - CONNECTIONSTRINGS__READONLY=Host=postgres-readonly;Database=NewsAppBackend;Username=postgres;Password=postgres;
        depends_on:
            postgres-master:
                condition: service_healthy
            postgres-readonly:
                condition: service_started
    postgres-master:
        <<: *postgres-common
        ports:
            - "5432:5432"
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: NewsAppBackend
            POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
            POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
        command: |
            postgres 
            -c wal_level=replica 
            -c hot_standby=on 
            -c max_wal_senders=10 
            -c max_replication_slots=10 
            -c hot_standby_feedback=on
        volumes:
            - postgres-master-data:/var/lib/postgresql/data
            - ./init-db.sql:/docker-entrypoint-initdb.d/00-init-db.sql
    postgres-readonly:
        <<: *postgres-common
        ports:
            - "5433:5432"
        environment:
            PGUSER: replicator
            PGPASSWORD: replicator_password
        user: postgres
        command: |
            bash -c "
            if [ ! -f /var/lib/postgresql/data/postgresql.conf ]; then
                until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres-master --port=5432
                do
                    echo 'Waiting for primary to connect...'
                    sleep 1s
                done
            fi
            echo 'Backup done, starting replica...'
            chmod 0700 /var/lib/postgresql/data
            postgres
            "
        depends_on:
            postgres-master:
                condition: service_healthy
volumes:
    postgres-master-data:
